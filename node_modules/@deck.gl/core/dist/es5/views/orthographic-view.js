"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _view = _interopRequireDefault(require("./view"));

var _viewport = _interopRequireDefault(require("../viewports/viewport"));

var _math = require("math.gl");

var _webMercator = require("@math.gl/web-mercator");

var vec2 = _interopRequireWildcard(require("gl-matrix/vec2"));

var _orthographicController = _interopRequireDefault(require("../controllers/orthographic-controller"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var viewMatrix = new _math.Matrix4().lookAt({
  eye: [0, 0, 1]
});

function getProjectionMatrix(_ref) {
  var width = _ref.width,
      height = _ref.height,
      near = _ref.near,
      far = _ref.far;
  width = width || 1;
  height = height || 1;
  return new _math.Matrix4().ortho({
    left: -width / 2,
    right: width / 2,
    bottom: -height / 2,
    top: height / 2,
    near: near,
    far: far
  });
}

var OrthographicViewport = function (_Viewport) {
  (0, _inherits2.default)(OrthographicViewport, _Viewport);

  var _super = _createSuper(OrthographicViewport);

  function OrthographicViewport(props) {
    var _this;

    (0, _classCallCheck2.default)(this, OrthographicViewport);
    var width = props.width,
        height = props.height,
        _props$near = props.near,
        near = _props$near === void 0 ? 0.1 : _props$near,
        _props$far = props.far,
        far = _props$far === void 0 ? 1000 : _props$far,
        _props$zoom = props.zoom,
        zoom = _props$zoom === void 0 ? 0 : _props$zoom,
        _props$target = props.target,
        target = _props$target === void 0 ? [0, 0, 0] : _props$target,
        _props$flipY = props.flipY,
        flipY = _props$flipY === void 0 ? true : _props$flipY;
    var zoomX = Array.isArray(zoom) ? zoom[0] : zoom;
    var zoomY = Array.isArray(zoom) ? zoom[1] : zoom;
    var zoom_ = Math.min(zoomX, zoomY);
    var scale = Math.pow(2, zoom_);
    _this = _super.call(this, _objectSpread(_objectSpread({}, props), {}, {
      longitude: null,
      position: target,
      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),
      projectionMatrix: getProjectionMatrix({
        width: width,
        height: height,
        near: near,
        far: far
      }),
      zoom: zoom_
    }));

    if (zoomX !== zoomY) {
      var scaleX = Math.pow(2, zoomX);
      var scaleY = Math.pow(2, zoomY);
      _this.distanceScales = {
        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],
        metersPerUnit: [scale / scaleX, scale / scaleY, 1]
      };
    }

    return _this;
  }

  (0, _createClass2.default)(OrthographicViewport, [{
    key: "projectFlat",
    value: function projectFlat(_ref2) {
      var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
          X = _ref3[0],
          Y = _ref3[1];

      var unitsPerMeter = this.distanceScales.unitsPerMeter;
      return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];
    }
  }, {
    key: "unprojectFlat",
    value: function unprojectFlat(_ref4) {
      var _ref5 = (0, _slicedToArray2.default)(_ref4, 2),
          x = _ref5[0],
          y = _ref5[1];

      var metersPerUnit = this.distanceScales.metersPerUnit;
      return [x * metersPerUnit[0], y * metersPerUnit[1]];
    }
  }, {
    key: "panByPosition",
    value: function panByPosition(coords, pixel) {
      var fromLocation = (0, _webMercator.pixelsToWorld)(pixel, this.pixelUnprojectionMatrix);
      var toLocation = this.projectFlat(coords);
      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));
      var newCenter = vec2.add([], this.center, translate);
      return {
        target: newCenter
      };
    }
  }]);
  return OrthographicViewport;
}(_viewport.default);

var OrthographicView = function (_View) {
  (0, _inherits2.default)(OrthographicView, _View);

  var _super2 = _createSuper(OrthographicView);

  function OrthographicView(props) {
    (0, _classCallCheck2.default)(this, OrthographicView);
    return _super2.call(this, _objectSpread(_objectSpread({}, props), {}, {
      type: OrthographicViewport
    }));
  }

  (0, _createClass2.default)(OrthographicView, [{
    key: "controller",
    get: function get() {
      return this._getControllerProps({
        type: _orthographicController.default
      });
    }
  }]);
  return OrthographicView;
}(_view.default);

exports.default = OrthographicView;
OrthographicView.displayName = 'OrthographicView';
//# sourceMappingURL=orthographic-view.js.map