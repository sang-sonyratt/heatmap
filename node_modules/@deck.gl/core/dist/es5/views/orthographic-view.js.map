{"version":3,"sources":["../../../src/views/orthographic-view.js"],"names":["viewMatrix","Matrix4","lookAt","eye","getProjectionMatrix","width","height","near","far","ortho","left","right","bottom","top","OrthographicViewport","props","zoom","target","flipY","zoomX","Array","isArray","zoomY","zoom_","Math","min","scale","pow","longitude","position","clone","projectionMatrix","scaleX","scaleY","distanceScales","unitsPerMeter","metersPerUnit","X","Y","x","y","coords","pixel","fromLocation","pixelUnprojectionMatrix","toLocation","projectFlat","translate","vec2","add","negate","newCenter","center","Viewport","OrthographicView","type","_getControllerProps","OrthographicController","View","displayName"],"mappings":"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","sourcesContent":["import View from './view';\nimport Viewport from '../viewports/viewport';\n\nimport {Matrix4} from 'math.gl';\nimport {pixelsToWorld} from '@math.gl/web-mercator';\nimport * as vec2 from 'gl-matrix/vec2';\nimport OrthographicController from '../controllers/orthographic-controller';\n\nconst viewMatrix = new Matrix4().lookAt({eye: [0, 0, 1]});\n\nfunction getProjectionMatrix({width, height, near, far}) {\n  // Make sure Matrix4.ortho doesn't crash on 0 width/height\n  width = width || 1;\n  height = height || 1;\n\n  return new Matrix4().ortho({\n    left: -width / 2,\n    right: width / 2,\n    bottom: -height / 2,\n    top: height / 2,\n    near,\n    far\n  });\n}\n\nclass OrthographicViewport extends Viewport {\n  constructor(props) {\n    const {\n      width,\n      height,\n      near = 0.1,\n      far = 1000,\n      zoom = 0,\n      target = [0, 0, 0],\n      flipY = true\n    } = props;\n    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;\n    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;\n    const zoom_ = Math.min(zoomX, zoomY);\n    const scale = Math.pow(2, zoom_);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: null,\n      position: target,\n      viewMatrix: viewMatrix.clone().scale([scale, scale * (flipY ? -1 : 1), scale]),\n      projectionMatrix: getProjectionMatrix({width, height, near, far}),\n      zoom: zoom_\n    });\n\n    if (zoomX !== zoomY) {\n      const scaleX = Math.pow(2, zoomX);\n      const scaleY = Math.pow(2, zoomY);\n\n      this.distanceScales = {\n        unitsPerMeter: [scaleX / scale, scaleY / scale, 1],\n        metersPerUnit: [scale / scaleX, scale / scaleY, 1]\n      };\n    }\n  }\n\n  projectFlat([X, Y]) {\n    const {unitsPerMeter} = this.distanceScales;\n    return [X * unitsPerMeter[0], Y * unitsPerMeter[1]];\n  }\n\n  unprojectFlat([x, y]) {\n    const {metersPerUnit} = this.distanceScales;\n    return [x * metersPerUnit[0], y * metersPerUnit[1]];\n  }\n\n  /* Needed by LinearInterpolator */\n  panByPosition(coords, pixel) {\n    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);\n    const toLocation = this.projectFlat(coords);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return {target: newCenter};\n  }\n}\n\nexport default class OrthographicView extends View {\n  constructor(props) {\n    super({\n      ...props,\n      type: OrthographicViewport\n    });\n  }\n\n  get controller() {\n    return this._getControllerProps({\n      type: OrthographicController\n    });\n  }\n}\n\nOrthographicView.displayName = 'OrthographicView';\n"],"file":"orthographic-view.js"}